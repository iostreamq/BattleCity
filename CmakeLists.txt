cmake_minimum_required(VERSION 3.16 FATAL_ERROR)

set(PROJECT_NAME BattleCity)
project(${PROJECT_NAME})

add_executable(${PROJECT_NAME} 
src/main.cpp
src/Renderer/ShaderProgram.cpp
src/Resources/ResourceManager.cpp
src/Renderer/Texture2D.cpp
src/Renderer/Sprite.cpp
src/Renderer/VertexBuffer.cpp
src/Renderer/indexBuffer.cpp
src/Renderer/VertexArray.cpp
src/Renderer/VertexBufferLayout.cpp
src/Renderer/SpriteAnimator.cpp
src/Renderer/Renderer.cpp


src/Game/Game.cpp

src/Game/GameState/Levels.cpp
src/Game/GameState/GameState.cpp
src/Game/GameState/StartScreen.cpp

src/Game/GameObjects/Tank.cpp
src/Game/GameObjects/BrickWall.cpp
src/Game/GameObjects/BetonWall.cpp
src/Game/GameObjects/IGameObjects.cpp
src/Game/GameObjects/Trees.cpp
src/Game/GameObjects/Ice.cpp
src/Game/GameObjects/Water.cpp
src/Game/GameObjects/Eagle.cpp
src/Game/GameObjects/Border.cpp
src/Game/GameObjects/Bullet.cpp

src/Physics/PhysicsEngine.cpp

src/System/Timer.cpp

src/Resources/ResourceManager.h
src/Renderer/ShaderProgram.h
src/Resources/stb_image.h
src/Renderer/Texture2D.h
src/Renderer/Sprite.h
src/Renderer/VertexBuffer.h
src/Renderer/indexBuffer.h
src/Renderer/VertexArray.h
src/Renderer/VertexBufferLayout.h
src/Renderer/Renderer.h
src/Renderer/SpriteAnimator.h

src/Physics/PhysicsEngine.h

src/System/Timer.h

src/Game/Game.h

src/Game/GameState/Levels.h
src/Game/GameState/GameState.h
src/Game/GameState/StartScreen.h

src/Game/GameObjects/Tank.h
src/Game/GameObjects/BrickWall.h
src/Game/GameObjects/BetonWall.h
src/Game/GameObjects/IGameObjects.h
src/Game/GameObjects/Trees.h
src/Game/GameObjects/Ice.h
src/Game/GameObjects/Water.h
src/Game/GameObjects/Eagle.h
src/Game/GameObjects/Border.h
src/Game/GameObjects/Bullet.h
)

set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(GLFW_INSTALL OFF CACHE BOOL "" FORCE)

add_subdirectory(external/glfw)
target_link_libraries(${PROJECT_NAME} glfw)

add_subdirectory(external/glad)
target_link_libraries(${PROJECT_NAME} glad)

add_subdirectory(external/glm)
target_link_libraries(${PROJECT_NAME} glm)

include_directories(external/rapidjson/include)

set_target_properties(${PROJECT_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/)

add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD
                   COMMAND ${CMAKE_COMMAND} -E copy_directory
				   ${CMAKE_SOURCE_DIR}/res $<TARGET_FILE_DIR:${PROJECT_NAME}>/res)